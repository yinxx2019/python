1. Which functions I tested for Part 1
I will first test all minimal required constructor arguments in each class, the display() method in the Disk class, draw_line() and message() methods in the Board class, update() function and create_new_disk() function in the GameController class.

2. A summary of valid inputs (inputs for which you’d expect a ‘good’ result) and expected return values
For constructor arguments tests, I will assert the Disk class has attribute 'x', 'y', 'color', 'active', 'hide', 'rate', 'radius', and the Board class has attribute 'width', 'height', 'line_width', 'row_height', 'column_width'. In addition to use hasattr, I will assert several values such as disk.radius == 50 and board.line_width == 15 or assert the values I pass in parameters. For display() method in the disk class, I will assert disk.hide == False. For draw_line() method, I will assert values that are not out of range of height // row_height and width // column_width + 1. For the create_new_disk() function, I will assert len(disks) >0 after I append a new item to the disks list. I will also assert the color is red for human_player_turn and yellow for not human_player_turn. For the update() method, I will assert corresponding array[column_number] to see if it draws disks in the right position. I will also assert len(disks) != 4 and disks[-1} is not active when the board.message is shown. They will return the test pass.

3. A summary of invalid inputs (inputs for which you’d expect a ‘bad’ result) and expected return values
For constructor arguments tests, I will assert the Disk class and the Board class has attribute that not exist In addition to use hasattr, I will assert several wrong values such as disk.radius == 150 and board.line_width == 5 or assert the values I pass in parameters. For display() method in the disk class, I will assert disk.hide == True. For draw_line() method, I will assert values that are out of range of height // row_height and width // column_width + 1. For the create_new_disk() function, I will assert len(disks) <=0 after I append a new item to the disks list. I will also assert the color is yellow for human_player_turn and red for not human_player_turn. For the update() method, I will assert wrong array[column_number] that not corresponding to disks in the right position. I will also assert len(disks) == 4 and disks[-1} is active when the board.message is shown. They will return the test fail with assertion error. 

4. Whether you’re confident you’ve verified every possible eventuality
I'm confident that by doing my test most possible eventuality will be verified but I still need advanced knowledge on testing the timing of "game over" message after the board is filled. I set a delay to ensure that the message shows up after the last disk dropping to the right position. However, since processing.py does not have a built-in delay() function, I customized that and in the test file, I can test if the message shows up when meeting the standard of the board is full but cannot test if the timing is exact. 
5. Whether your testing revealed any bugs that you then went back and fixed.
During the initial test, I found that when I set mouseX larger than the x coordinate of the space, it will cause an index error. I fixed the bug after the test