1. In Listing 5.4 (addnonnegatives.py) could the condition of the if statement have used > instead of >= and achieved the same results? Why?

Yes. Even though it doesn't add the entry of 0 into the sum, whether 0 is added or not will not change anything as for any real number x + 0 still equals to x itself.


2. In Listing 5.4 (addnonnegatives.py) could the condition of the while statement have used > instead of >= and achieved the same results? Why?

No it couldn't. Using > instead of >= will cause 0 to end the program, while listing 5.4 only allows negative numbers to end the program.


3. In Listing 5.4 (addnonnegatives.py) what would happen if the statement 

entry = int(input()) # Get the value

were moved out of the loop? Is moving the assignment out of the loop a good or bad thing to do? Why?

In this case, moving it out of the loop is bad. First, since the entry = 0 was set, if entry = int(input()) is moved out of the loop, the while entry >= 0 will cause the loop infinite. Moreover, the entry can only be input for once and will never be updated by user input. Moving the assignment out of the loop is bad if you want to keep the value updated by each time of looping.


4. How many asterisks does the following code fragment print?
a=0
while a < 100:
    print('*', end='')
    a += 1 print()
print()

100


5. How many asterisks does the following code fragment print?
a=0
while a < 100:
    print('*', end='')
print()

Infinite. "a" always < 100 and the program will never end.


13. Provide the exact sequence of integers specified by each of the following range expressions.
(a) range(5)
0
1
2
3
4

(b) range(5, 10)
5
6
7
8
9

(c) range(5, 20, 3)
5
8
11
14
17

(d) range(20, 5, -1) 
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6

(e) range(20, 5, -3)
20
17
14
11
8

(f) range(10, 5)
N/A

(g) range(0)
N/A

(h) range(10, 101, 10)
10
20
30
40
50
60
70
80
90
100

(i) range(10, -1, -1)
10
9
8
7
6
5
4
3
2
1
0

(j) range(-3, 4)
-3
-2
-1
0
1
2
3

(k) range(0, 10, 1)
0
1
2
3
4
5
6
7
8
9